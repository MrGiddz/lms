// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  // provider     = "postgresql"
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model LMSCourse {
  id          String  @id @default(uuid())
  userId      String
  title       String  @db.Text
  description String? @db.Text
  imageUrl    String? @db.Text
  price       Float?
  isPublished Boolean @default(false)

  chapters LMSChapter[]

  categoryId String?
  category   LMSCategory? @relation(fields: [categoryId], references: [id])

  attachments LMSAttachment[]
  purchases   LMSPurchase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@fulltext([title])
}

model LMSCategory {
  id      String   @id @default(uuid())
  name    String   @unique
  courses LMSCourse[]
}

model LMSAttachment {
  id   String  @id @default(uuid())
  name String
  url  String? @db.Text

  courseId String
  course   LMSCourse @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model LMSChapter {
  id          String  @id @default(uuid())
  title       String
  description String? @db.Text
  videoUrl    String? @db.Text
  position    Int
  isPublished Boolean @default(false)
  isFree      Boolean @default(false)

  muxData LMSMuxData?

  courseId String
  course   LMSCourse @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress LMSUserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model LMSMuxData {
  id         String  @id @default(uuid())
  chapterId  String  @unique
  assetId    String
  playbackId String?

  chapter LMSChapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model LMSUserProgress {
  id        String  @id @default(uuid())
  userId    String
  chapterId String
  chapter   LMSChapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model LMSPurchase {
  id       String @id @default(uuid())
  userId   String
  courseId String
  course   LMSCourse @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
  @@index([courseId])
}

model LMSStripeCustomer {
  id               String @id @default(uuid())
  userId           String @unique
  stripeCustomerid String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
